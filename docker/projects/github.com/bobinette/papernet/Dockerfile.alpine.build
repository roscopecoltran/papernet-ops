FROM alpine:3.6
LABEL maintainer="rosco_pecoltran@msn.com"

## Project VCS - Info
ARG PROJECT_VCS_PROVIDER=${PROJECT_VCS_PROVIDER:-"github.com"}
ARG PROJECT_NAMESPACE=${PROJECT_NAMESPACE:-"bobinette"}
ARG PROJECT_NAME=${PROJECT_NAME:-"papernet"}
ARG PROJECT_VCS_BRANCH=${PROJECT_VCS_BRANCH:-master}

## Global 'ENV' variables
ENV PROJECT_VCS_PROVIDER=${PROJECT_VCS_PROVIDER} \
    PROJECT_NAMESPACE=${PROJECT_NAMESPACE} \
	PROJECT_NAME=${PROJECT_NAME}

## Build Tasks - Settings
ARG APP_TASK_MANAGER=${APP_TASK_MANAGER:-"github.com/Nananas/ymake"}

## Pre-build - Settings
ARG APP_PREBUILD_ALL=${APP_PREBUILD_ALL:-true}
ARG APP_PREBUILD_DEL=${APP_PREBUILD_DEL:-true}
ARG APP_PREBUILD_AUTH=${APP_PREBUILD_AUTH:-mkjwk}

## Compilation - Settings
ARG GOLANG_CROSS_BUILDER=${GOLANG_CROSS_BUILDER:-gox}
ARG GOLANG_PKG_MANAGER=${GOLAMG_PKG_MANAGER:-glide}

##### [Go] Cross-build - Settings
ARG XC_BUILD=${XC_BUILD:-false}
ARG XC_ARCH=${XC_ARCH:-"386 amd64"}
ARG XC_OS=${XC_OS:-"linux darwin"}

## Container Security - Settings
ARG GOSU_VERSION=${GOSU_VERSION:-1.10}

## Container Packages - Settings
ARG ALPINE_PKG_BUILD="go gcc g++ make musl-dev musl"
ARG ALPINE_PKG_INTERACTIVE="bash nano tree"

# Install Gosu to /usr/local/bin/gosu (Simple Go-based setuid+setgid+setgroups+exec)
ADD https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64 /usr/local/sbin/gosu

# Add sources
COPY ./docker /docker
ADD ./glide.yaml /glide.yaml
ADD ./glide.lock /glide.lock

# Set default work directory
WORKDIR /app

# Install runtime dependencies & create runtime user
RUN	chmod +x /usr/local/sbin/gosu \
    && adduser -D app -h /data -s /bin/sh \
    && apk --update --no-cache add git ca-certificates openssl \
    && git clone --recursive --depth=1 -b ${PROJECT_VCS_BRANCH:-master} https://${PROJECT_VCS_PROVIDER}/${PROJECT_NAMESPACE}/${PROJECT_NAME} /app \
    && mv /docker /app/docker \
    && mv /glide.yaml /app/glide.yaml \
    && mv /glide.lock /app/glide.lock \
    && if [ ${APP_PREBUILD_ALL} ];then chmod +x ./docker/build.sh; ./docker/build.sh; fi \
    && apk --no-cache del git ca-certificates openssl
    
# NSSwitch configuration file
COPY docker/config/nsswitch.conf /etc/nsswitch.conf

# Container configuration
VOLUME ["/data", "/dist", "/app/configuration"]
EXPOSE 1705

# Container entrypoints
COPY ./docker/entrypoint.sh /app/docker/entrypoint.sh

# Container run command
CMD ["/usr/local/sbin/gosu", "app", "./docker/entrypoint.sh"]